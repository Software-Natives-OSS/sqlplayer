#
# Copyright zulli73@gmail.com. All Rights Reserved.
#
# Use of this source code is governed by the MIT license
#
import os
import sys
import glob
import argparse
import sqlhelper.helper as helper

OVERALL_SQL_FILE = 'Overall.sql'
OVERALL_HEADER = '''--
-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- THIS FILE IS AUTOMATICALLY GENERATED BY THE sqlplayer.py
-- DO NOT EDIT AS IT WILL GET OVERWRITTEN
-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--
'''


def read_tasks(loc):
    '''Searches for 'task files' at the location specified by 'loc'. A 'task
    file' needs to follow the following name pattern:

    xx_SomeText.sql

    Where 'xx' is usually a number like in '01_FirstFile.sql' and 
    '09_AnotherFile.sql'
    
    :param loc: Is the location of the "playbook directory" to scan for task
     files
    :return: A alphanumerically sorted list of 'tasks'
    '''
    tasks = []
    print("Looking for playbook tasks at '{}'".format(loc))
    for task in glob.glob(os.path.join(loc, '*_*.sql')):
        print("\t{}".format(task))
        tasks.append(task)
    # sort the tasks, so that 01_xxxx will be executed before 02_xxx, etc.
    return sorted(tasks)


def run_playbook():
    parser = argparse.ArgumentParser()
    parser.add_argument("playbook_or_task")
    args = parser.parse_args()

    loc_directory = loc = args.playbook_or_task
    if os.path.isdir(loc):
        tasks = read_tasks(loc)
    elif os.path.isfile(loc):
        # presume the passed location is task-file
        tasks = [loc]
        # as 'loc' points to a file, we need to get it's directory
        loc_directory = os.path.dirname(loc)
    else:
        raise Exception("Provided location '{}' seems to be neither a file nor a directory".format(loc))

    if len(tasks) > 0:
        # Find and read the 'MySQL connection options file', which specifies how
        # to connect to the desired MySQL server
        sql_opts = helper.read_opts(loc_directory)
        # All successfully executed SQL statements are put into an 'overall file'.
        # That file servers at least the following purposes:
        #  - It may be useful for debugging purposes ("which SQL statements got 
        #    executed?")
        #  - It simplifies "manually" re-running these SQL statements, as that file 
        #    can easily be opened with e.b. MySQL Workbench and executed from there.
        with open(os.path.join(loc_directory, OVERALL_SQL_FILE), 'w') as overall_sql_file:
            overall_sql_file.write(OVERALL_HEADER)
            try:
                print("Trying to connect to database...")
                sql_connection = helper.create_connection(sql_opts)
                for task in tasks:
                    print("Executing '{}'...".format(task))
                    helper.run_sql_file(task, sql_connection, overall_sql_file)
                print("Successfully exeucted all tasks")
            except Exception as e:
                sys.stderr.write("Failed to execute tasks:\n\t{}\n".format(str(e)))
    else:
        print("No tasks found.")